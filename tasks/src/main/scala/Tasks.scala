import scala.math.BigInt
import scala.util.Random
import scala.language.postfixOps

object Tasks extends App{
  //1. Переменные res – это значения val или настоящие переменные var?
  println("-----------------------Задание №1-----------------------")
  println("Это значения val. val (value) – переменные являются неизменными")

  //2. "crazy" * 3
  println("-----------------------Задание №2-----------------------")
  val zd2 = "crazy"*3
  println(zd2)

  //3. Что означает выражение 10 max 2? В каком классе определен метод max?
  println("-----------------------Задание №3-----------------------")
  val zd3 = 10 max 2
  println(zd3)
  println("Метод max принадлежит к классу RichInt")

  //4. Используя число типа BigInt, вычислите 2^1024
  println("-----------------------Задание №4-----------------------")
  val zd4 = BigInt(2).pow(1024)
  println(zd4)

  //5. Что нужно импортировать, чтобы найти случайное простое число вызовом метода probablePrime(100, Random) без использования каких-либо префиксов перед именами probablePrime и Random?
  println("-----------------------Задание №5-----------------------")
  val zd5 = BigInt.probablePrime(100,new Random())
  println(zd5)

  //6. Один из способов создать файл или каталог со случайным именем состоит в том, чтобы сгенерировать случайное число типа BigInt и преобразовать его в систему счисления по основанию 36,
  //в результате получится строка, такая как "qsnvbevtomcj38o06kul". Отыщите в Scaladoc методы, которые можно было бы использовать для этого.
  println("-----------------------Задание №6-----------------------")
  val zd6 = BigInt.probablePrime(100,new Random()).toString(36)
  println(zd6)

  //7. Как получить первый символ строки в языке Scala? А последний символ?
  println("-----------------------Задание №7-----------------------")
  val zd7 = "Felix Smirnov"
  println(zd7)
  println(zd7.head)
  println(zd7.takeRight(1))

  //8. Что делают строковые функции take, drop, takeRight и dropRight? Какие преимущества и недостатки они имеют в сравнении с substring?
  println("-----------------------Задание №8-----------------------")
  println("take(n:Int) return Строка, содержащая первые n символов этой строки. Получить строку от первого до n-го символа.")
  println("drop (n:Int) Остальная часть строки без первых n символов. Возвращает строку без первых n символов.")
  println("takeRight(n: Int) Строка, содержащая последние n символов этой строки.")
  println("dropRight(n: Int) Остальная часть строки без последних n символов. Вернуть строку без последних n символов.")
  println("substring(start: Int, end: Int) Вы можете свободно перехватывать любую позицию строки, но вышеупомянутый метод необходимо использовать несколько раз при перехвате позиций без головы и хвоста.")

  //9. Сигнум числа равен 1, если число положительное. -1 – если отрицательное, и 0 – если равно нулю. Напишите функцию, вычисляющую это значение.
  println("-----------------------Задание №9-----------------------")
  val zd9 = BigInt(10).signum
  println(zd9)

  //10. Какое значение возвращает блок {}? Каков его тип?
  println("-----------------------Задание №10-----------------------")
  println("В Scala блок {} содержит последовательность выражений, а результат также является выражением. Значение блока — это значение последнего выражения.")

  //11. Напишите на языке Scala цикл, эквивалентный циклу на языке Java for (int i=10; i>=0; i--) System.out.println(i)
  println("-----------------------Задание №11-----------------------")
  for (i <- 0 to 10 reverse) println(i)

  //12. Напишите процедуру countdown (n: Int), которая выводит числа от n до 0
  println("-----------------------Задание №12-----------------------")
  def countdown(n: Int): Unit = {
    for (i <- n to 0 by -1) println(i)
  }
  countdown(13)

  //13. Напишите цикл for для вычисления кодовых пунктов Юникода всех букв в строке. Например, произведение символов в строке «Hello» равно 9415087488L.
  println("-----------------------Задание №13-----------------------")
  var t: Long = 1
  for (i <- "Hello") {
    t = t * i.toLong
  }
  println(t)

  //14. Решите предыдущее упражнение без применения цикла. Напишите функцию product(s: String), вычисляющую произведение, как описано в предыдущих упражнениях.
  println("-----------------------Задание №14-----------------------")
  val st = "Hello".map(_.toLong).product
  println(st)

  //15. Сделайте функцию из предыдущего упражнения рекурсивной.
  println("-----------------------Задание №15-----------------------")
  def prodRec(s: String): Long = {
    if (s.toList.isEmpty) 1
    else {
      s.toList.head * prodRec(s.tail)
    }
  }
  println(prodRec("Hello"))

  //16. Напишите функцию, вычисляющую xn, где n – целое число. Используйте следующее рекурсивное определение: • xn = y2, если n – четное и положительное число,
  //где y=xn/2 • xn = x*xn-1, если n – нечетное и положительное число. • x0=1. • xn=1/x-n, если n – отрицательное число. Не используйте инструкцию return.
  println("-----------------------Задание №16-----------------------")
  def mi(x: Double,n: Int): Double = {
    if (n == 0) 1
    else if (n>0) x * mi(x,n-1)
    else 1/mi(x,-n)
  }
  println(mi(13,9))

  //17. f(m,n) - сумма всех натуральных чисел от m до n включительно, в десятичной записи которых нет одинаковых цифр.
  println("-----------------------Задание №17-----------------------")
  def f(m: Int,n: Int): Int={
    Range(m, n+1).filter(num => num.toString.distinct == num.toString).sum
  }
  println(f(10,19))

  //18. Список содержит целые числа, а также другие списки, такие же как и первоначальный.
  //Получить список, содержащий только целые числа из всех вложенных списков.
  //Пример: f(List(List(1, 1), 2, List(3, List(5, 8)))) = List(1, 1, 2, 3, 5, 8)
  println("-----------------------Задание №18-----------------------")
  def fu(list: List[Any]): List[Int] = {
    var result: List[Int] = List()
    for (i <- list) {
      if (i.isInstanceOf[Int]){
        result :+= i.toString.toInt
      } else {
        result :++= fu(i.asInstanceOf[List[Any]])
      }
    }
    result
  }
  println(fu(List(List(1, 1), 2, List(3, 5, 8))))

  //19. f(n) - сумма цифр наибольшего простого делителя натурального числа n.
  println("-----------------------Задание №19-----------------------")
  def fun(n: Int): Int = {
    Range(1, n+1).filter(num => (n % num == 0) && !Range(2, num).exists(i => num % i == 0)).max.toString.map(_.asDigit).sum
  }
  println(fun(18))

  //20. Список содержит элементы одного, но любого типа.
  //Получить список, содержащий каждый имеющийся элемент старого списка k раз подряд.
  //Число k задается при выполнении программы.
  println("-----------------------Задание №20-----------------------")
  def func(list: List[Any]): List[Any]={
    var result: List[Any] = List()
    val k = 4
    for (i <- list){
      for (j <- 1 to k){
        result :+= i
      }
    }
    result
  }
  println(func(List(1,2,3,4,5)))

  //21. f(m,n) - наименьшее общее кратное натуральных чисел m и n.
  println("-----------------------Задание №21-----------------------")
  def funct(m: Int,n: Int): Int={
    Range(m max n, Int.MaxValue).find(num => num % n == 0 && num % m == 0) match {
      case Some(value) => value
      case None => -1
    }
  }
  println(funct(22,31))

  //22. Список содержит элементы одного, но любого типа.
  //Получить список, из элементов исходного, удаляя каждый k-й элемент.
  //Число k задается при выполнении программы.
  println("-----------------------Задание №22-----------------------")
  def functi(list: List[Any]): List[Any]={
    val k = 3
    list.grouped(k).flatMap(_.take(k - 1)).toList
  }
  println(functi(List(1,2,3,4,5,6)))

  //23. f(n,k) - число размещений из n по k. Факториал не использовать.
  println("-----------------------Задание №23-----------------------")
  def factor(n: Int): Int={
    if (n == 1) 1
    else n * factor(n - 1)
  }
  def fac(n: Int,k: Int): Double={
    factor(n)/factor(n-k)
  }
  println(fac(7,2))

  //24. Список содержит элементы одного, но любого типа. Получить новый список,
  //перемещая циклически каждый элемент на k позиций влево (при перемещении на одну позицию
  //первый элемент становится последним, второй первым и так далее).
  //Число k задается при выполнении программы. Если k отрицательное, то перемещение происходит вправо.
  println("-----------------------Задание №24-----------------------")
  def functio(list: List[Any], n: Int): List[Any]={
    var res = list
    for (i <- 1 to n){
        res = res.takeRight(list.length - 1) ++ res.take(1)
    }
    res
  }
  println(functio(List(1,2,3,4,5,6), 3))

  //25. f(n) - наибольшее совершенное число не превосходящее n.
  //Совершенным называется натуральное число n равное сумме своих делителей,
  //меньших n, например 6 = 1 + 2 + 3 ( f(6) = 6, f(7) = 6, ... ).
  println("-----------------------Задание №25-----------------------")
  def function(n: Int): Int = {
    Range(1, n).filter(item => item == Range(1,item).filter(value => item % value == 0).sum).max
  }
  println(function(13))

  //26. Список содержит элементы одного, но любого типа.
  //Получить два списка из элементов исходного, выбирая в первый элементы с четными индексами,
  //а во второй с нечетными.
  println("-----------------------Задание №26-----------------------")
  def funcy(list: List[Any]): (List[Any], List[Any])={
    var chet: List[Any] = List()
    var nechet: List[Any] = List()
    for (k <- list.indices){
      if (k % 2 == 0){
        nechet :+= list(k)
      } else {
        chet :+= list(k)
      }
    }
    (chet, nechet)
  }
  println(funcy(List(1,2,3,4,5)))

  //27. f(n) - наибольшее из чисел от 1 до n включительно, обладающее свойством: сумма цифр n в некоторой степени > 1 равна самому числу n. Пример: 512 = 83
  println("-----------------------Задание №27-----------------------")
  def functia(n: Int): Int={
    var count = 1
    var sum = 0
    for(i <- n to 1 by -1){
      var j = i
      while (j > 0){
        sum += j % 10
        j /= 10
      }
      if(sum > 1){
        val k = sum
        while (sum < i){
          sum *= k
          count += 1
        }
      }
      if(sum == i && count != 1) return sum
      sum=0
    }
    0
  }
  println(functia(213))

  //28. Список в качестве элементов содержит кортежи типа: (n, s), где n — целые числа, а s — строки. Получить два списка из элементов исходного, выбирая в первый числа, а во второй строки из кортежей
  println("-----------------------Задание №28-----------------------")
  def foo(list: List[Any]): (List[Any], List[Any])={
    var chisla: List[Any] = List()
    var stroki: List[Any] = List()
    for (k <- list.indices){
      if (k % 2 == 0){
        chisla :+= list(k)
      } else {
        stroki :+= list(k)
      }
    }
    (chisla, stroki)
  }
  println(foo(List(1,"first",2,"second",3)))
}
